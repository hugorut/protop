// Code generated by MockGen. DO NOT EDIT.
// Source: ./port.go

// Package mock_http is a generated GoMock package.
package mock_http

import (
	gomock "github.com/golang/mock/gomock"
	processor "github.com/hugorut/protop/portgw/internal/processor"
	reflect "reflect"
)

// MockProcessorProvider is a mock of ProcessorProvider interface
type MockProcessorProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorProviderMockRecorder
}

// MockProcessorProviderMockRecorder is the mock recorder for MockProcessorProvider
type MockProcessorProviderMockRecorder struct {
	mock *MockProcessorProvider
}

// NewMockProcessorProvider creates a new mock instance
func NewMockProcessorProvider(ctrl *gomock.Controller) *MockProcessorProvider {
	mock := &MockProcessorProvider{ctrl: ctrl}
	mock.recorder = &MockProcessorProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProcessorProvider) EXPECT() *MockProcessorProviderMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockProcessorProvider) Get(arg0 string) (processor.FileProcessor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(processor.FileProcessor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockProcessorProviderMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProcessorProvider)(nil).Get), arg0)
}
