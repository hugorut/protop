// Code generated by MockGen. DO NOT EDIT.
// Source: ./provider.go

// Package mock_processor is a generated GoMock package.
package mock_processor

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFileProcessor is a mock of FileProcessor interface
type MockFileProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockFileProcessorMockRecorder
}

// MockFileProcessorMockRecorder is the mock recorder for MockFileProcessor
type MockFileProcessorMockRecorder struct {
	mock *MockFileProcessor
}

// NewMockFileProcessor creates a new mock instance
func NewMockFileProcessor(ctrl *gomock.Controller) *MockFileProcessor {
	mock := &MockFileProcessor{ctrl: ctrl}
	mock.recorder = &MockFileProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileProcessor) EXPECT() *MockFileProcessorMockRecorder {
	return m.recorder
}

// Process mocks base method
func (m *MockFileProcessor) Process(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Process indicates an expected call of Process
func (mr *MockFileProcessorMockRecorder) Process(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockFileProcessor)(nil).Process), arg0)
}
